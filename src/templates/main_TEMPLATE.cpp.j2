// This file is to be used as part of a Jinja2 template

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>


#define DEBUG                                               true
#define USER_FILE_PATH "{{user_file_path}}"
#define INDEXER_C_TYPE "{{ indexer_c_type }}"

typedef {{ indexer_c_type }} indexed_data_type;

struct {
    {% for field in struct_head_lst %}
        {{ make_field_name_in_struct(field) }};
    {% endfor %}
} userStructHead;

struct {
    {% for field in struct_lst %}
        {{ make_field_name_in_struct(field) }};
    {% endfor %}
} userStruct;

static const size_t SIZE_OF_STRUCT = sizeof(userStruct);
static const size_t SIZE_OF_HEAD = sizeof(userStructHead);

struct nodeBlock {
    {{ indexer_c_type }} userField;
    unsigned long long offset;
};
// need to save "{{ indexer_c_name }}"

static Indexer<nodeBlock> indexer;

// functions
int index_file(char * path);
void *castToType(void *arg);

template<typename... Args>
void log(const char* message, Args... args);
void log(const char* message);
void log(const std::string message);


int main(int argc, char const *argv[]) {
    // Expected args:
    //      - 0 : TABLE_PATH (str) : path of the table to be indexed
    //      - 1 : COMMAND (int) :
    //              - 0 : User is asking to index table
    //              - 1 : User is asking to print index table
    const std::string TABLE_PATH = std::string(argv[0]);
    const int COMMAND = atoi(argv[1]);

    const std::string INDEX_PATH = TABLE_PATH + std::string("_INDEX");

    ind = Indexer<nodeBlock>();

    return 0;
}


template<typename... Args>
void log(const char* message, Args... args) {
    if (DEBUG)
        printf(message, args...);
}

void log(const char* message) {
    if (DEBUG)
        printf("%s", message);
}

void log(const std::string message) {
    if (DEBUG)
        std::cout << message << '\n';
}

int index_file(char * path) {
   std::ifstream infile;
   infile.open(USER_FILE_PATH);

    struct nodeBlock bufferStruct;

    FILE *fp = fopen(USER_FILE_PATH, "rb");
    myStruct tmp;
    while (fread(&tmp, sizeof(myStruct), 1, fp)) {
        bufferStruct.offset = ftell(fp) - sizeof(myStruct);
        bufferStruct.userField = tmp.{{ indexer_c_name }};
        indexer.add(bufferStruct);
    }

    infile.close();
    return 0;
}

void *castToType(void *arg) { // vai ser utilizada no search
    if (strcmp(INDEXER_C_TYPE, "float") == 0) {
        float *tmp = (float *) malloc(sizeof(float) * 1);
        *tmp = atof((char *) arg);
        return tmp;
    } else if () {

    }
}
